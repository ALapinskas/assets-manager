export class AssetsManager{#audio;#images;#tileSetImages;#tilemaps;#audioQueue;#imagesQueue;#tileMapsQueue;#isLoading;#isAllFilesLoaded;constructor(){this.#audio=new Map,this.#images=new Map,this.#tileSetImages=new Map,this.#tilemaps=new Map,this.#audioQueue=[],this.#imagesQueue=[],this.#tileMapsQueue=[],this.#isLoading=void 0,this.#isAllFilesLoaded=!1}getAudio(key){const val=this.#audio.get(key);if(val)return val;Warning("Audio with key '"+key+"' is not registered")}getImage(key){const val=this.#images.get(key);if(val)return val;Warning("Image with key '"+key+"' is not registered")}getTileMap(key){const val=this.#tilemaps.get(key);if(val)return val;Warning("Tilemap with key '"+key+"' is not registered")}getTilesetImageArray(key){return this.#tileSetImages.get(key)}preload(){return this.#isLoading=!0,Promise.allSettled(this.#audioQueue).then((loadingResults=>(loadingResults.forEach((result=>{"rejected"===result.status&&Warning(result.reason||result.value)})),this.#audioQueue=[],Promise.allSettled(this.#tileMapsQueue).then((loadingResults=>(loadingResults.forEach((result=>{"rejected"===result.status&&Warning(result.reason||result.value)})),this.#tileMapsQueue=[],Promise.allSettled(this.#imagesQueue).then((loadingResults=>(loadingResults.forEach((result=>{"rejected"===result.status&&Warning(result.reason||result.value)})),this.#imagesQueue=[],this.#isAllFilesLoaded=!0,this.#isLoading=!1,Promise.resolve())))))))))}get isLoading(){return this.#isLoading}get isAllFilesLoaded(){return this.#isAllFilesLoaded}addAudio(key,url){this.#checkInputParams(key,url);const promise=this.#loadAudio(key,url);this.#audioQueue.push(promise)}addImage(key,url){this.#checkInputParams(key,url);const promise=this.#loadImage(key,url);this.#imagesQueue.push(promise)}addTileMap(key,url){this.#checkInputParams(key,url);const promise=new Promise(((resolve,reject)=>{fetch(url).then((response=>response.json())).then((data=>{let relativePath,split=url.split("/"),length=split.length;"1.9"===!data.version&&Warning("Not tested with version: "+data.version),split[length-1].includes(".tmj")||split[length-1].includes(".json")?(split.pop(),relativePath=split.join("/")+"/"):(split[length-2].includes(".tmj")||split[length-2].includes(".json"))&&(split.splice(length-2,2),relativePath=split.join("/")+"/"),this.#addTileMap(key,data),console.log("tilemap was added"),data.tilesets&&data.tilesets.length>0&&data.tilesets.forEach(((tileset,idx)=>{this.#loadTileSet(tileset,relativePath).then((tileset=>{this.#attachTilesetData(key,idx,tileset),resolve()}))}))})).catch((err=>{reject(err)}))}));this.#tileMapsQueue.push(promise)}#loadTileSet(tileset,relativePath){const{firstgid:gid,source:url}=tileset;return fetch(relativePath+url).then((response=>response.json())).then((data=>{const{name:name,image:image}=data;return name&&image&&this.addImage(name,relativePath?relativePath+image:image,data),data.gid=gid,Promise.resolve(data)})).catch((err=>Promise.reject(err)))}#loadAudio(key,url){return new Promise(((resolve,reject)=>{const audio=new Audio(url);audio.addEventListener("loadeddata",(()=>{this.#addNewAudio(key,audio),resolve()})),audio.addEventListener("error",(err=>{reject(err)}))}))}#loadImage(key,url){return new Promise(((resolve,reject)=>{const img=new Image;img.onload=()=>{createImageBitmap(img).then((imageBitmap=>{this.#addNewImage(key,imageBitmap),resolve()}))},img.onerror=err=>{reject(err)},img.src=url}))}#loadTileSetImage(key,url,tilesetData){const{tilecount:tilecount,columns:columns,tilewidth:tilewidth,tileheight:tileheight}=tilesetData;return new Promise(((resolve,reject)=>{const img=new Image;img.onload=()=>{const createImagePromises=[];let currentRow=0,currentColumn=0;for(let i=0;i<tilecount;i++)0!==i&&(i%columns==0?(currentRow+=1,currentColumn=0):currentColumn+=1),createImagePromises.push(createImageBitmap(img,currentColumn*tileheight,currentRow*tilewidth,tilewidth,tileheight));Promise.allSettled(createImagePromises).then((results=>{let imagesArray=[];results.forEach((result=>{"rejected"===result.status&&Warning(result.reason||result.value),imagesArray.push(result.value)})),this.#addNewTileSetImage(key,imagesArray),resolve()}))},img.onerror=err=>{reject(err)},img.src=url}))}#checkInputParams(key,url){key&&0!==key.trim().length||Exception("key should be provided"),url&&0!==url.trim().length||Exception("image url should be provided")}#addNewAudio(key,audio){this.#audio.set(key,audio)}#addNewImage(key,image){this.#images.set(key,image)}#addNewTileSetImage(key,imageArray){this.#tileSetImages.set(key,imageArray)}#attachTilesetData(key,idx,tileset){this.#tilemaps.get(key).tilesets[idx].data=tileset}#addTileMap(key,data){this.#tilemaps.set(key,data)}}function Exception(message){throw new Error(message)}function Warning(message){console.warn(message)}