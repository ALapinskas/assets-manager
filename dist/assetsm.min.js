export default class AssetsManager{#e;#t;#i;#s;#a;#n;#o;#d;constructor(){this.#e=new Map,this.#t=new Map,this.#i=new Map,this.#s=[],this.#a=[],this.#n=[],this.#o=void 0,this.#d=!1}getAudio(e){const t=this.#e.get(e);if(t)return t;Warning("Audio with key '"+e+"' is not registered")}getImage(e){const t=this.#t.get(e);if(t)return t;Warning("Image with key '"+e+"' is not registered")}getTileMap(e){const t=this.#i.get(e);if(t)return t;Warning("Tilemap with key '"+e+"' is not registered")}preload(){return this.#o=!0,Promise.allSettled(this.#s).then((e=>(e.forEach((e=>{"rejected"===e.status&&Warning(e.reason||e.value)})),this.#s=[],Promise.allSettled(this.#n).then((e=>(e.forEach((e=>{"rejected"===e.status&&Warning(e.reason||e.value)})),this.#n=[],Promise.allSettled(this.#a).then((e=>(e.forEach((e=>{"rejected"===e.status&&Warning(e.reason||e.value)})),this.#a=[],this.#d=!0,this.#o=!1,Promise.resolve())))))))))}get isLoading(){return this.#o}get isAllFilesLoaded(){return this.#d}addAudio(e,t){this.#r(e,t);const i=this.#u(e,t);this.#s.push(i)}addImage(e,t){this.#r(e,t);const i=this.#l(e,t);this.#a.push(i)}addTileMap(e,t){this.#r(e,t);const i=new Promise(((i,s)=>{fetch(t).then((e=>e.json())).then((s=>{let a,n=t.split("/"),o=n.length;"1.9"===!s.version&&Warning("Not tested with version: "+s.version),n[o-1].includes(".tmj")||n[o-1].includes(".json")?(n.pop(),a=n.join("/")+"/"):(n[o-2].includes(".tmj")||n[o-2].includes(".json"))&&(n.splice(o-2,2),a=n.join("/")+"/"),this.#h(e,s),console.log("tilemap was added"),s.tilesets&&s.tilesets.length>0&&s.tilesets.forEach(((t,s)=>{this.#g(t,a).then((t=>{this.#c(e,s,t),i()}))}))})).catch((e=>{s(e)}))}));this.#n.push(i)}#g(e,t){const{firstgid:i,source:s}=e;return fetch(t+s).then((e=>e.json())).then((e=>{const{name:s,image:a}=e;return s&&a&&this.addImage(s,t?t+a:a,e),e.gid=i,Promise.resolve(e)})).catch((e=>Promise.reject(e)))}#u(e,t){return new Promise(((i,s)=>{const a=new Audio(t);a.addEventListener("loadeddata",(()=>{this.#m(e,a),i()})),a.addEventListener("error",(e=>{s(e)}))}))}#l(e,t){return new Promise(((i,s)=>{const a=new Image;a.onload=()=>{createImageBitmap(a).then((t=>{this.#p(e,t),i()}))},a.onerror=e=>{s(e)},a.src=t}))}#r(e,t){e&&0!==e.trim().length||Exception("key should be provided"),t&&0!==t.trim().length||Exception("image url should be provided")}#m(e,t){this.#e.set(e,t)}#p(e,t){this.#t.set(e,t)}#c(e,t,i){this.#i.get(e).tilesets[t].data=i}#h(e,t){this.#i.set(e,t)}}function Exception(e){throw new Error(e)}function Warning(e){console.warn(e)}