const PROGRESS_EVENT_TYPE={loadstart:"loadstart",progress:"progress",abort:"abort",error:"error",load:"load",timeout:"timeout"};export default class AssetsManager{#e;#t;#s;#i;#a;#n;#r;constructor(){this.#t=new Map,this.#s=new Map,this.#i=new Map,this.#a=[],this.#n=[],this.#r=[],this.#e=new EventTarget}getAudio(e){const t=this.#t.get(e);if(t)return t;Warning("Audio with key '"+e+"' is not loaded")}getImage(e){const t=this.#s.get(e);if(t)return t;Warning("Image with key '"+e+"' is not loaded")}getTileMap(e){const t=this.#i.get(e);if(t)return t;Warning("Tilemap with key '"+e+"' is not loaded")}preload(){let e=this.#a.length+this.#r.length+this.#n.length;return this.#e.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.loadstart,{total:e})),Promise.allSettled(this.#a.map((e=>e()))).then((t=>{t.forEach((e=>{"rejected"===e.status&&Warning(e.reason||e.value)}));let s=this.#a.length;return s>0&&(e-=s,this.#e.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.progress,{lengthComputable:!0,loaded:s,total:e}))),this.#a=[],Promise.allSettled(this.#r.map((e=>e()))).then((t=>{t.forEach((e=>{"rejected"===e.status&&Warning(e.reason||e.value)}));let i=this.#r.length;if(i>0){let t=i+s;e=this.#n.length,this.#e.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.progress,{lengthComputable:!0,loaded:t,total:e}))}return this.#r=[],Promise.allSettled(this.#n.map((e=>e()))).then((e=>{e.forEach((e=>{"rejected"===e.status&&Warning(e.reason||e.value)}));let t=this.#n.length;if(t>0){let e=s+i+t;this.#e.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.progress,{lengthComputable:!0,loaded:e,total:0}))}return this.#e.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.load)),this.#n=[],Promise.resolve()}))}))}))}addAudio(e,t){this.#o(e,t);const s=this.#u(e,t);this.#a.push(s)}addImage(e,t){this.#o(e,t);const s=this.#d(e,t);this.#n.push(s)}addTileMap(e,t){this.#o(e,t);this.#r.push((()=>new Promise(((s,i)=>{fetch(t).then((e=>e.json())).then((i=>{let a,n=t.split("/"),r=n.length;n[r-1].includes(".tmj")||n[r-1].includes(".json")?(n.pop(),a=n.join("/")+"/"):(n[r-2].includes(".tmj")||n[r-2].includes(".json"))&&(n.splice(r-2,2),a=n.join("/")+"/"),this.#h(e,i),i.tilesets&&i.tilesets.length>0&&i.tilesets.forEach(((t,i)=>{this.#l(t,a).then((t=>{this.#g(e,i,t),s()}))}))})).catch((e=>{i(e)}))}))))}addEventListener(e,t,...s){PROGRESS_EVENT_TYPE[e]?this.#e.addEventListener(e,t,...s):Warning("Event type should be one of the ProgressEvent.type")}removeEventListener(e,t,...s){this.#e.removeEventListener(e,t,...s)}#l(e,t){const{firstgid:s,source:i}=e;return fetch(t+i).then((e=>e.json())).then((e=>{const{name:i,image:a}=e;return i&&a&&this.addImage(i,t?t+a:a,e),e.gid=s,Promise.resolve(e)})).catch((e=>Promise.reject(e)))}#u(e,t){return()=>new Promise(((s,i)=>{const a=new Audio(t);a.addEventListener("loadeddata",(()=>{this.#m(e,a),s()})),a.addEventListener("error",(e=>{i(e)}))}))}#d(e,t){return()=>new Promise(((s,i)=>{const a=new Image;a.onload=()=>{createImageBitmap(a).then((t=>{this.#p(e,t),s()}))},a.onerror=e=>{i(e)},a.src=t}))}#o(e,t){e&&0!==e.trim().length||Exception("key should be provided"),t&&0!==t.trim().length||Exception("image url should be provided")}#m(e,t){this.#t.set(e,t)}#p(e,t){this.#s.set(e,t)}#g(e,t,s){this.#i.get(e).tilesets[t].data=s}#h(e,t){this.#i.set(e,t)}}function Exception(e){throw new Error(e)}function Warning(e){console.warn(e)}