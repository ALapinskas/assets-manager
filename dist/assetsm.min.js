const PROGRESS_EVENT_TYPE={loadstart:"loadstart",progress:"progress",abort:"abort",error:"error",load:"load",timeout:"timeout"};export default class AssetsManager{#e;#t;#i;#s;#a;#r;#o;#n;constructor(){this.#t=new Map,this.#i=new Map,this.#s=new Map,this.#a=new Map,this.#r=new Map,this.#o=new Map,this.#e=new EventTarget,this.#n=0}get filesWaitingForUpload(){return this.#a.size+this.#o.size+this.#r.size}getAudio(e){const t=this.#t.get(e);if(t)return t;Warning("Audio with key '"+e+"' is not loaded")}getImage(e){const t=this.#i.get(e);if(t)return t;Warning("Image with key '"+e+"' is not loaded")}getTileMap(e){const t=this.#s.get(e);if(t)return t;Warning("Tilemap with key '"+e+"' is not loaded")}preload(){return this.#d(),Promise.allSettled(Array.from(this.#a.entries()).map((e=>this.#h(e[0],e[1])))).then((e=>(e.forEach((e=>{"rejected"===e.status&&Warning(e.reason||e.value)})),Promise.allSettled(Array.from(this.#o.entries()).map((e=>this.#u(e[0],e[1])))).then((e=>(e.forEach((e=>{"rejected"===e.status&&Warning(e.reason||e.value)})),Promise.allSettled(Array.from(this.#r.entries()).map((e=>this.#l(e[0],e[1])))).then((e=>(e.forEach((e=>{"rejected"===e.status&&Warning(e.reason||e.value)})),this.#m(),Promise.resolve())))))))))}addAudio(e,t){this.#g(e,t),this.#a.has(e)&&Warning("Audio with key ",e," is already registered"),this.#a.set(e,t)}addImage(e,t){this.#g(e,t),this.#r.has(e)&&Warning("Image with key ",e," is already registered"),this.#r.set(e,t)}addTileMap(e,t){this.#g(e,t),this.#o.has(e)&&Warning("Tilemap with key ",e," is already registered"),this.#o.set(e,t)}addEventListener(e,t,...i){PROGRESS_EVENT_TYPE[e]?this.#e.addEventListener(e,t,...i):Warning("Event type should be one of the ProgressEvent.type")}removeEventListener(e,t,...i){this.#e.removeEventListener(e,t,...i)}#p(e,t){const{firstgid:i,source:s}=e;return fetch(t+s).then((e=>e.json())).then((e=>{const{name:s,image:a}=e;return s&&a&&this.addImage(s,t?t+a:a,e),e.gid=i,Promise.resolve(e)})).catch((e=>Promise.reject(e)))}#u(e,t){return new Promise(((i,s)=>{fetch(t).then((e=>e.json())).then((s=>{let a,r=t.split("/"),o=r.length;r[o-1].includes(".tmj")||r[o-1].includes(".json")?(r.pop(),a=r.join("/")+"/"):(r[o-2].includes(".tmj")||r[o-2].includes(".json"))&&(r.splice(o-2,2),a=r.join("/")+"/"),this.#c(e,s),this.#E(e),s.tilesets&&s.tilesets.length>0&&s.tilesets.forEach(((t,s)=>{this.#p(t,a).then((t=>{this.#P(e,s,t),this.#v(),i()}))}))})).catch((e=>{this.#w(e),s(e)}))}))}#h(e,t){return new Promise(((i,s)=>{const a=new Audio(t);a.addEventListener("loadeddata",(()=>{this.#Q(e,a),this.#T(e),this.#v(),i()})),a.addEventListener("error",(e=>{this.#w(e),s(e)}))}))}#l(e,t){return new Promise(((i,s)=>{const a=new Image;a.onload=()=>{createImageBitmap(a).then((t=>{this.#L(e,t),this.#M(e),this.#v(),i()}))},a.onerror=e=>{this.#w(error),s(e)},a.src=t}))}#g(e,t){e&&0!==e.trim().length||Exception("key should be provided"),t&&0!==t.trim().length||Exception("image url should be provided")}#Q(e,t){this.#t.set(e,t)}#T(e){this.#a.delete(e)}#L(e,t){this.#i.set(e,t)}#M(e){this.#r.delete(e)}#P(e,t,i){this.#s.get(e).tilesets[t].data=i}#c(e,t){this.#s.set(e,t)}#E(e){this.#o.delete(e)}#d(){let e=this.filesWaitingForUpload;this.#e.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.loadstart,{total:e}))}#m(){this.#e.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.load))}#v(){const e=this.filesWaitingForUpload;this.#n+=1,this.#e.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.progress,{lengthComputable:!0,loaded:this.#n,total:e}))}#w(e){this.#e.dispatchEvent(new ProgressEvent(PROGRESS_EVENT_TYPE.error,{error:e}))}}function Exception(e){throw new Error(e)}function Warning(e){console.warn(e)}